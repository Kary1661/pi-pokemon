{"ast":null,"code":"import _toConsumableArray from\"C:/PI/pi-pokemon/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"C:/PI/pi-pokemon/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var initialState={pokemonsGlobal:[],types:[],filteredPokemons:[],orderedPokemons:[],selectedPokemon:null};var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"GET_ALL_POKEMONS\":return _objectSpread(_objectSpread({},state),{},{pokemonsGlobal:action.payload});case\"GET_ALL_TYPES\":return _objectSpread(_objectSpread({},state),{},{types:action.payload});case\"GET_POKEMON_BY_ID\":console.log(action.payload);return _objectSpread(_objectSpread({},state),{},{selectedPokemon:action.payload});case\"GET_POKEMON_BY_NAME\":return _objectSpread(_objectSpread({},state),{},{filteredPokemons:action.payload});case\"FILTER_ALL\":var allPokemons=typeof state.orderedPokemons!==\"string\"&&state.orderedPokemons.length?_toConsumableArray(state.orderedPokemons):_toConsumableArray(state.pokemonsGlobal);var filteredByType=allPokemons.filter(function(pokemon){return pokemon.types.includes(action.payload.type);});if(typeof state.orderedPokemons===\"string\"){allPokemons=_toConsumableArray(state.pokemonsGlobal);}if(action.payload.type===\"all\"){filteredByType=_toConsumableArray(allPokemons);}if(filteredByType===\"error\"){return _objectSpread(_objectSpread({},state),{},{filteredPokemons:\"error\"});}var filteredBySource=[];if(action.payload.source===\"dbPokemons\"){filteredBySource=filteredByType.filter(function(pokemon){return isNaN(Number(pokemon.id));});}else if(action.payload.source===\"apiPokemons\"){filteredBySource=filteredByType.filter(function(pokemon){return!isNaN(Number(pokemon.id));});}else{filteredBySource=_toConsumableArray(filteredByType);}if(filteredBySource.length===0){return _objectSpread(_objectSpread({},state),{},{filteredPokemons:\"error\"});}else{return _objectSpread(_objectSpread({},state),{},{filteredPokemons:filteredBySource});}case\"ORDER_BY_NAME\":var allPokemonsNames=_toConsumableArray(state.pokemonsGlobal);if(typeof state.filteredPokemons===\"string\"){return _objectSpread(_objectSpread({},state),{},{orderedPokemons:\"error\"});}else typeof state.filteredPokemons!==\"string\"&&state.filteredPokemons.length?allPokemonsNames=_toConsumableArray(state.filteredPokemons):allPokemonsNames=_toConsumableArray(state.pokemonsGlobal);if(action.payload===\"aToZ\"){var orderPokemonsNames=allPokemonsNames.sort(function(a,b){if(a.name.toLowerCase()<b.name.toLowerCase()){return-1;}if(a.name.toLowerCase()>b.name.toLowerCase()){return 1;}return 0;});return _objectSpread(_objectSpread({},state),{},{orderedPokemons:orderPokemonsNames});}if(action.payload===\"zToA\"){var _orderPokemonsNames=allPokemonsNames.sort(function(a,b){if(a.name.toLowerCase()<b.name.toLowerCase()){return 1;}if(a.name.toLowerCase()>b.name.toLowerCase()){return-1;}return 0;});return _objectSpread(_objectSpread({},state),{},{orderedPokemons:_orderPokemonsNames});}break;case\"ORDER_BY_ATTACK\":var allPokemonsAttack=_toConsumableArray(state.pokemonsGlobal);if(typeof state.filteredPokemons===\"string\"){return _objectSpread(_objectSpread({},state),{},{orderedPokemons:\"error\"});}else typeof state.filteredPokemons!==\"string\"&&state.filteredPokemons.length?allPokemonsAttack=_toConsumableArray(state.filteredPokemons):allPokemonsAttack=_toConsumableArray(state.pokemonsGlobal);if(action.payload===\"ascending\"){var orderPokemonsAttack=allPokemonsAttack.sort(function(a,b){if(a.attack<b.attack){return-1;}if(a.attack>b.attack){return 1;}return 0;});return _objectSpread(_objectSpread({},state),{},{orderedPokemons:orderPokemonsAttack});}if(action.payload===\"descending\"){var _orderPokemonsAttack=allPokemonsAttack.sort(function(a,b){if(a.attack<b.attack){return 1;}if(a.attack>b.attack){return-1;}return 0;});return _objectSpread(_objectSpread({},state),{},{orderedPokemons:_orderPokemonsAttack});}break;case\"CLEAR_DETAIL\":return _objectSpread(_objectSpread({},state),{},{selectedPokemon:null});case\"CLEAR_ORDER\":return _objectSpread(_objectSpread({},state),{},{orderedPokemons:_toConsumableArray(state.pokemonsGlobal)});default:return _objectSpread({},state);}};export default reducer;","map":{"version":3,"names":["initialState","pokemonsGlobal","types","filteredPokemons","orderedPokemons","selectedPokemon","reducer","state","arguments","length","undefined","action","type","_objectSpread","payload","console","log","allPokemons","_toConsumableArray","filteredByType","filter","pokemon","includes","filteredBySource","source","isNaN","Number","id","allPokemonsNames","orderPokemonsNames","sort","a","b","name","toLowerCase","allPokemonsAttack","orderPokemonsAttack","attack"],"sources":["C:/PI/pi-pokemon/client/src/Redux/reducer.js"],"sourcesContent":["const initialState = {\r\n    pokemonsGlobal: [],\r\n    types: [],\r\n    filteredPokemons: [],\r\n    orderedPokemons: [],\r\n    selectedPokemon: null\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        \r\n        case \"GET_ALL_POKEMONS\":\r\n            return {...state, pokemonsGlobal: action.payload};\r\n\r\n        case \"GET_ALL_TYPES\":\r\n            return {...state, types: action.payload};\r\n\r\n        case \"GET_POKEMON_BY_ID\":\r\n          console.log(action.payload)\r\n            return {...state, selectedPokemon: action.payload};\r\n\r\n        case \"GET_POKEMON_BY_NAME\":\r\n            return {...state, filteredPokemons: action.payload};\r\n\r\n            case \"FILTER_ALL\":\r\n              let allPokemons = typeof state.orderedPokemons !== \"string\" && state.orderedPokemons.length ? [...state.orderedPokemons] : [...state.pokemonsGlobal]\r\n              let filteredByType = allPokemons.filter(pokemon => pokemon.types.includes(action.payload.type))\r\n\r\n              if(typeof state.orderedPokemons === \"string\"){\r\n                allPokemons = [...state.pokemonsGlobal]\r\n              }\r\n  \r\n              if(action.payload.type === \"all\"){\r\n                filteredByType = [...allPokemons]\r\n              }\r\n  \r\n              if(filteredByType === \"error\"){\r\n                return {...state, filteredPokemons: \"error\"}\r\n              }\r\n  \r\n              let filteredBySource = []\r\n              if(action.payload.source === \"dbPokemons\"){\r\n                filteredBySource = filteredByType.filter(pokemon => isNaN(Number(pokemon.id)))\r\n              }else if(action.payload.source === \"apiPokemons\"){\r\n                filteredBySource = filteredByType.filter(pokemon => !isNaN(Number(pokemon.id)))\r\n              }else{\r\n                filteredBySource = [...filteredByType]\r\n              }\r\n  \r\n              if(filteredBySource.length === 0){\r\n                return {...state, filteredPokemons: \"error\"}\r\n              }else{\r\n                return {...state, filteredPokemons: filteredBySource}\r\n              }\r\n\r\n          case \"ORDER_BY_NAME\":\r\n            let allPokemonsNames = [...state.pokemonsGlobal];\r\n            if(typeof state.filteredPokemons === \"string\"){\r\n              return {...state, orderedPokemons: \"error\"}\r\n            }\r\n\r\n           else typeof state.filteredPokemons !== \"string\" && state.filteredPokemons.length ? allPokemonsNames = [...state.filteredPokemons] : allPokemonsNames = [...state.pokemonsGlobal]\r\n\r\n            if(action.payload === \"aToZ\"){\r\n             let orderPokemonsNames = allPokemonsNames.sort((a, b) => {\r\n                if (a.name.toLowerCase() < b.name.toLowerCase()) {\r\n                  return -1;\r\n                }\r\n                if (a.name.toLowerCase() > b.name.toLowerCase()) {\r\n                  return 1;\r\n                }\r\n                return 0;\r\n              })\r\n              return {...state, orderedPokemons: orderPokemonsNames}\r\n            }\r\n\r\n            if(action.payload === \"zToA\"){\r\n              let orderPokemonsNames = allPokemonsNames.sort((a, b) => {\r\n                 if (a.name.toLowerCase() < b.name.toLowerCase()) {\r\n                   return 1;\r\n                 }\r\n                 if (a.name.toLowerCase() > b.name.toLowerCase()) {\r\n                   return -1;\r\n                 }\r\n                 return 0;\r\n               })\r\n               return {...state, orderedPokemons: orderPokemonsNames}\r\n             }\r\n             break;\r\n\r\n            case \"ORDER_BY_ATTACK\":\r\n              let allPokemonsAttack = [...state.pokemonsGlobal];\r\n\r\n              if(typeof state.filteredPokemons === \"string\"){\r\n                return {...state, orderedPokemons: \"error\"}\r\n              }\r\n              else typeof state.filteredPokemons !== \"string\" && state.filteredPokemons.length ? allPokemonsAttack = [...state.filteredPokemons] : allPokemonsAttack = [...state.pokemonsGlobal]\r\n\r\n            if(action.payload === \"ascending\"){\r\n             let orderPokemonsAttack = allPokemonsAttack.sort((a, b) => {\r\n                if (a.attack < b.attack) {\r\n                  return -1;\r\n                }\r\n                if (a.attack > b.attack) {\r\n                  return 1;\r\n                }\r\n                return 0;\r\n              })\r\n              return {...state, orderedPokemons: orderPokemonsAttack}\r\n            }\r\n\r\n            if(action.payload === \"descending\"){\r\n              let orderPokemonsAttack = allPokemonsAttack.sort((a, b) => {\r\n                 if (a.attack < b.attack) {\r\n                   return 1;\r\n                 }\r\n                 if (a.attack > b.attack) {\r\n                   return -1;\r\n                 }\r\n                 return 0;\r\n               })\r\n               return {...state, orderedPokemons: orderPokemonsAttack}\r\n             }\r\n             break;\r\n             \r\n            case \"CLEAR_DETAIL\":\r\n              return {...state, selectedPokemon: null}\r\n\r\n            case \"CLEAR_ORDER\":\r\n              return {...state, orderedPokemons: [...state.pokemonsGlobal]}\r\n\r\n        default: return {...state};\r\n    }\r\n}\r\n\r\nexport default reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}