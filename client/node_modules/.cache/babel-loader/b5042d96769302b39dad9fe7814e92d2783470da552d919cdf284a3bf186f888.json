{"ast":null,"code":"const validate = form => {\n  const regexName = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/;\n  const regexImage = /(http(s?):)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/;\n  let errors = {};\n  if (!form.image && !regexImage.test(form.image)) {\n    errors.image = 'Image is required';\n  }\n  if (!form.name) {\n    errors.name = 'Name is required';\n  }\n  if (!regexName.test(form.name)) {\n    errors.name = 'Name must contain only letters';\n  }\n  if (form.name.length > 30) {\n    errors.name = 'Name must be less than 30 characters';\n  }\n  if (!form.hp) {\n    errors.hp = 'Hp is required';\n  }\n  if (form.hp <= 0 || form.hp > 300) {\n    errors.hp = 'Hp must be between 1 and 300';\n  }\n  if (!form.attack) {\n    errors.attack = 'Attack is required';\n  }\n  if (form.attack <= 0 || form.attack > 200) {\n    errors.attack = 'Attack must be between 1 and 200';\n  }\n  if (!form.defense) {\n    errors.defense = 'Defense is required';\n  }\n  if (form.defense <= 0 || form.defense > 200) {\n    errors.defense = 'Defense must be between 1 and 200';\n  }\n  if (form.types.length === 0) {\n    errors.types = 'Types is required';\n  }\n  if (form.types.length > 3) {\n    errors.types = 'There must be a maximum of 3 types';\n  }\n  if (form.types.includes(\"19\") && form.types.length > 1) {\n    errors.types = 'If the pokemon is legendary, it can only have one type';\n  }\n  return errors;\n};\nexport default {\n  validate\n};","map":{"version":3,"names":["validate","form","regexName","regexImage","errors","image","test","name","length","hp","attack","defense","types","includes"],"sources":["C:/PI/pi-pokemon/client/src/allViews/CreateForm/validate.js"],"sourcesContent":["const validate = (form) => {\r\n    const regexName = /^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/;\r\n    const regexImage = /(http(s?):)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/;\r\n    let errors = {};\r\n\r\n    if (!form.image && !regexImage.test(form.image)) {\r\n        errors.image = 'Image is required';\r\n    }\r\n\r\n    if (!form.name) {\r\n        errors.name = 'Name is required';\r\n    }\r\n\r\n    if (!regexName.test(form.name)) {\r\n        errors.name = 'Name must contain only letters';\r\n    }\r\n\r\n    if (form.name.length > 30) {\r\n        errors.name = 'Name must be less than 30 characters';\r\n    }\r\n\r\n    if (!form.hp) {\r\n        errors.hp = 'Hp is required';\r\n    }\r\n\r\n    if (form.hp <= 0 || form.hp > 300) {\r\n        errors.hp = 'Hp must be between 1 and 300';\r\n    }\r\n\r\n    if (!form.attack) {\r\n        errors.attack = 'Attack is required';\r\n    }\r\n\r\n    if (form.attack <= 0 || form.attack > 200) {\r\n        errors.attack = 'Attack must be between 1 and 200';\r\n    }\r\n\r\n    if (!form.defense) {\r\n        errors.defense = 'Defense is required';\r\n    }\r\n\r\n    if (form.defense <= 0 || form.defense > 200) {\r\n        errors.defense = 'Defense must be between 1 and 200';\r\n    }\r\n\r\n    if (form.types.length === 0) {\r\n        errors.types = 'Types is required';\r\n    }\r\n\r\n    if (form.types.length > 3) {\r\n        errors.types = 'There must be a maximum of 3 types';\r\n    }\r\n\r\n    if (form.types.includes(\"19\") && form.types.length > 1) {\r\n        errors.types = 'If the pokemon is legendary, it can only have one type';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport default { validate };"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,IAAI,IAAK;EACvB,MAAMC,SAAS,GAAG,4CAA4C;EAC9D,MAAMC,UAAU,GAAG,8CAA8C;EACjE,IAAIC,MAAM,GAAG,CAAC,CAAC;EAEf,IAAI,CAACH,IAAI,CAACI,KAAK,IAAI,CAACF,UAAU,CAACG,IAAI,CAACL,IAAI,CAACI,KAAK,CAAC,EAAE;IAC7CD,MAAM,CAACC,KAAK,GAAG,mBAAmB;EACtC;EAEA,IAAI,CAACJ,IAAI,CAACM,IAAI,EAAE;IACZH,MAAM,CAACG,IAAI,GAAG,kBAAkB;EACpC;EAEA,IAAI,CAACL,SAAS,CAACI,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,EAAE;IAC5BH,MAAM,CAACG,IAAI,GAAG,gCAAgC;EAClD;EAEA,IAAIN,IAAI,CAACM,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;IACvBJ,MAAM,CAACG,IAAI,GAAG,sCAAsC;EACxD;EAEA,IAAI,CAACN,IAAI,CAACQ,EAAE,EAAE;IACVL,MAAM,CAACK,EAAE,GAAG,gBAAgB;EAChC;EAEA,IAAIR,IAAI,CAACQ,EAAE,IAAI,CAAC,IAAIR,IAAI,CAACQ,EAAE,GAAG,GAAG,EAAE;IAC/BL,MAAM,CAACK,EAAE,GAAG,8BAA8B;EAC9C;EAEA,IAAI,CAACR,IAAI,CAACS,MAAM,EAAE;IACdN,MAAM,CAACM,MAAM,GAAG,oBAAoB;EACxC;EAEA,IAAIT,IAAI,CAACS,MAAM,IAAI,CAAC,IAAIT,IAAI,CAACS,MAAM,GAAG,GAAG,EAAE;IACvCN,MAAM,CAACM,MAAM,GAAG,kCAAkC;EACtD;EAEA,IAAI,CAACT,IAAI,CAACU,OAAO,EAAE;IACfP,MAAM,CAACO,OAAO,GAAG,qBAAqB;EAC1C;EAEA,IAAIV,IAAI,CAACU,OAAO,IAAI,CAAC,IAAIV,IAAI,CAACU,OAAO,GAAG,GAAG,EAAE;IACzCP,MAAM,CAACO,OAAO,GAAG,mCAAmC;EACxD;EAEA,IAAIV,IAAI,CAACW,KAAK,CAACJ,MAAM,KAAK,CAAC,EAAE;IACzBJ,MAAM,CAACQ,KAAK,GAAG,mBAAmB;EACtC;EAEA,IAAIX,IAAI,CAACW,KAAK,CAACJ,MAAM,GAAG,CAAC,EAAE;IACvBJ,MAAM,CAACQ,KAAK,GAAG,oCAAoC;EACvD;EAEA,IAAIX,IAAI,CAACW,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC,IAAIZ,IAAI,CAACW,KAAK,CAACJ,MAAM,GAAG,CAAC,EAAE;IACpDJ,MAAM,CAACQ,KAAK,GAAG,wDAAwD;EAC3E;EAEA,OAAOR,MAAM;AACjB,CAAC;AAED,eAAe;EAAEJ;AAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}