[{"C:\\PI\\pi-pokemon\\client\\src\\index.js":"1","C:\\PI\\pi-pokemon\\client\\src\\App.js":"2","C:\\PI\\pi-pokemon\\client\\src\\reportWebVitals.js":"3","C:\\PI\\pi-pokemon\\client\\src\\Redux\\store.js":"4","C:\\PI\\pi-pokemon\\client\\src\\Redux\\reducer.js":"5","C:\\PI\\pi-pokemon\\client\\src\\Redux\\actions\\actionTypes.js":"6","C:\\PI\\pi-pokemon\\client\\src\\allViews\\Landing\\Landing.jsx":"7","C:\\PI\\pi-pokemon\\client\\src\\allViews\\CreateForm\\NewPokemon.jsx":"8","C:\\PI\\pi-pokemon\\client\\src\\allViews\\PokeDetail\\Detail.jsx":"9","C:\\PI\\pi-pokemon\\client\\src\\allViews\\NotFound\\NotFound.jsx":"10","C:\\PI\\pi-pokemon\\client\\src\\allViews\\Home\\Home.jsx":"11","C:\\PI\\pi-pokemon\\client\\src\\allViews\\CreateForm\\validate.js":"12","C:\\PI\\pi-pokemon\\client\\src\\components\\NavBar\\NavBar.jsx":"13","C:\\PI\\pi-pokemon\\client\\src\\components\\ContainerCards\\ContainerCards.jsx":"14","C:\\PI\\pi-pokemon\\client\\src\\components\\Card\\PokeCard.jsx":"15","C:\\PI\\pi-pokemon\\client\\src\\components\\Search\\SearchBar.jsx":"16","C:\\PI\\pi-pokemon\\client\\src\\Redux\\actions\\actions.js":"17"},{"size":638,"mtime":1686897454517,"results":"18","hashOfConfig":"19"},{"size":707,"mtime":1686898620543,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1681938231000,"results":"21","hashOfConfig":"19"},{"size":402,"mtime":1686897629079,"results":"22","hashOfConfig":"19"},{"size":5293,"mtime":1686768679261,"results":"23","hashOfConfig":"19"},{"size":530,"mtime":1687140550402,"results":"24","hashOfConfig":"19"},{"size":628,"mtime":1687138316916,"results":"25","hashOfConfig":"19"},{"size":6498,"mtime":1687145545536,"results":"26","hashOfConfig":"19"},{"size":1482,"mtime":1687131469128,"results":"27","hashOfConfig":"19"},{"size":624,"mtime":1687138275309,"results":"28","hashOfConfig":"19"},{"size":610,"mtime":1687138459397,"results":"29","hashOfConfig":"19"},{"size":1572,"mtime":1687130110059,"results":"30","hashOfConfig":"19"},{"size":781,"mtime":1686887662448,"results":"31","hashOfConfig":"19"},{"size":328,"mtime":1686766018912,"results":"32","hashOfConfig":"19"},{"size":670,"mtime":1687031055381,"results":"33","hashOfConfig":"19"},{"size":682,"mtime":1686768909960,"results":"34","hashOfConfig":"19"},{"size":1882,"mtime":1687140832089,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bu516v",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\PI\\pi-pokemon\\client\\src\\index.js",[],[],"C:\\PI\\pi-pokemon\\client\\src\\App.js",[],[],"C:\\PI\\pi-pokemon\\client\\src\\reportWebVitals.js",[],[],"C:\\PI\\pi-pokemon\\client\\src\\Redux\\store.js",[],[],"C:\\PI\\pi-pokemon\\client\\src\\Redux\\reducer.js",[],[],"C:\\PI\\pi-pokemon\\client\\src\\Redux\\actions\\actionTypes.js",[],[],[],"C:\\PI\\pi-pokemon\\client\\src\\allViews\\Landing\\Landing.jsx",[],[],"C:\\PI\\pi-pokemon\\client\\src\\allViews\\CreateForm\\NewPokemon.jsx",["89"],[],"import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport validate from \"./validate\";\r\nimport { getAllTypes } from \"../../Redux/actions/actions\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from \"./NewPokemon.module.css\";\r\n\r\nconst CreateForm = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllTypes())\r\n    }, [dispatch])\r\n\r\n    const types = useSelector(state => state.types)\r\n\r\n    const [input, setInput] = useState({\r\n        image: \"\",\r\n        name: \"\",\r\n        hp: \"0\",\r\n        attack: \"0\",\r\n        defense: \"0\",\r\n        speed: \"\",\r\n        height: \"0\",\r\n        weight: \"0\",\r\n        types: []\r\n    })\r\n\r\n    const [errors, setErrors] = useState({\r\n        image: \"\",\r\n        name: \"\",\r\n        hp: \"\",\r\n        attack: \"\",\r\n        defense: \"\",\r\n        speed: \"\",\r\n        height: \"\",\r\n        weight: \"\",\r\n        types: \"\"\r\n    });\r\n\r\n    const handleInputChange = (e) => {\r\n        const aux = e.target.name;\r\n        const value = e.target.value;\r\n        \r\n        setInput({\r\n            ...input,\r\n            [aux]: value\r\n        })\r\n        setErrors(validate({\r\n            ...input,\r\n            [aux]: value\r\n        }))\r\n    }\r\n\r\n    const handleTypesChange = (e) => {\r\n        const value = e.target.value;\r\n        if(!input.types.includes(value)){\r\n            setInput({\r\n                ...input,\r\n                types: [...input.types, value]\r\n            })\r\n            setErrors(validate({\r\n                ...input,\r\n                types: [...input.types, value]})); \r\n                e.target.value = \"\";\r\n        }else{\r\n            setInput({\r\n                ...input,\r\n                types: [...input.types]\r\n            })\r\n            setErrors(validate({\r\n                ...input,\r\n                types: [...input.types]}));\r\n                e.target.value = \"\";\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await axios.post(\"/pokemons\", form)\r\n            alert(\"Pokemon created successfuly \")\r\n            return response\r\n        } catch (error) {\r\n            alert(\"incorrect form\")\r\n        }\r\n    }\r\n\r\n    const onClose = (typeName) => {\r\n        let filteredTypes = input.types.filter(type => type !== typeName);\r\n        setInput({\r\n            ...input,\r\n            types: filteredTypes\r\n        })\r\n        setErrors(validate({\r\n            ...input,\r\n            types: [...filteredTypes]}))\r\n    }\r\n\r\n    const getTypeName = (typeId) => {\r\n        const filteredTypes = types.filter(type => type.id === Number(typeId));\r\n        let name = filteredTypes[0].name;\r\n        return name;\r\n    }\r\n\r\n    return (\r\n        <div className={style.container}>\r\n        <NavLink to=\"/home\"><button className={style.btnHome}>Back to Home</button></NavLink>\r\n        <div className={style.form}>\r\n            <form onSubmit={handleSubmit}>\r\n            <h1>Create your own Pokemon!</h1>\r\n            <div>\r\n                    <label>Image: </label>\r\n                    <input type=\"text\" name=\"image\" value={input.image} onChange={handleInputChange} />\r\n                    {errors.image && (<p className={style.danger}>{errors.image}</p>)}\r\n                </div>\r\n                <div>\r\n                    <label>Name: </label>\r\n                    <input type=\"text\" name=\"name\" value={input.name} onChange={handleInputChange} />\r\n                    {errors.name && (<p className={style.danger}>{errors.name}</p>)}\r\n                </div>\r\n                <div>\r\n                    <label>HP: </label>\r\n                    <input type=\"number\" name=\"hp\" value={input.hp} onChange={handleInputChange} />\r\n                    {errors.hp && (<p className={style.danger}>{errors.hp}</p>)}\r\n                </div>\r\n                <div>\r\n                    <label>Attack: </label>\r\n                    <input type=\"number\" name=\"attack\" value={input.attack} onChange={handleInputChange} />\r\n                    {errors.attack && (<p className={style.danger}>{errors.attack}</p>)}\r\n                </div>\r\n                <div>\r\n                    <label>Defense: </label>\r\n                    <input type=\"number\" name=\"defense\" value={input.defense} onChange={handleInputChange} />\r\n                    {errors.defense && (<p className={style.danger}>{errors.defense}</p>)}\r\n                </div>\r\n                <div>\r\n                    <label>Speed: </label>\r\n                    <input type=\"number\" name=\"speed\" value={input.speed} onChange={handleInputChange} />\r\n                    {errors.speed && (<p className={style.danger}>{errors.speed}</p>)}\r\n                </div>\r\n                <div>\r\n                    <label>Height: </label>\r\n                    <input type=\"number\" name=\"height\" value={input.height} onChange={handleInputChange} />\r\n                    {errors.height && (<p className={style.danger}>{errors.height}</p>)}\r\n                </div>\r\n                <div>\r\n                    <label>Weight: </label>\r\n                    <input type=\"number\" name=\"weight\" value={input.weight} onChange={handleInputChange} />\r\n                    {errors.weight && (<p className={style.danger}>{errors.weight}</p>)}\r\n                </div>\r\n                \r\n                <div>\r\n                    <label>Types: </label>\r\n                    <select name=\"types\" onChange={handleTypesChange}>\r\n                        <option value=\"\">Select a type</option>\r\n                        {types.map(type => (\r\n                            <option key={type.id} value={type.id}>{type.name}</option>\r\n                        ))}\r\n                    </select>\r\n                    {errors.types && (<p className={style.danger}>{errors.types}</p>)}\r\n                    <div className={style.container2}>\r\n                        {input.types.map(type => (\r\n                            <div key={type} className={style.types}>\r\n                                <p>{getTypeName(type)}</p>\r\n                                <button className={style.btnClose} type=\"button\" onClick={() => onClose(type)}>X</button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <button type=\"submit\">Create Pokemon</button>\r\n            </form>\r\n           </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CreateForm;","C:\\PI\\pi-pokemon\\client\\src\\allViews\\PokeDetail\\Detail.jsx",["90"],[],"C:\\PI\\pi-pokemon\\client\\src\\allViews\\NotFound\\NotFound.jsx",[],[],"C:\\PI\\pi-pokemon\\client\\src\\allViews\\Home\\Home.jsx",["91"],[],"C:\\PI\\pi-pokemon\\client\\src\\allViews\\CreateForm\\validate.js",[],[],"C:\\PI\\pi-pokemon\\client\\src\\components\\NavBar\\NavBar.jsx",[],[],"C:\\PI\\pi-pokemon\\client\\src\\components\\ContainerCards\\ContainerCards.jsx",[],[],"C:\\PI\\pi-pokemon\\client\\src\\components\\Card\\PokeCard.jsx",[],[],"C:\\PI\\pi-pokemon\\client\\src\\components\\Search\\SearchBar.jsx",["92"],[],"C:\\PI\\pi-pokemon\\client\\src\\Redux\\actions\\actions.js",[],[],{"ruleId":"93","severity":2,"message":"94","line":83,"column":60,"nodeType":"95","messageId":"96","endLine":83,"endColumn":64},{"ruleId":"97","severity":1,"message":"98","line":13,"column":11,"nodeType":"95","messageId":"99","endLine":13,"endColumn":16},{"ruleId":"93","severity":2,"message":"100","line":17,"column":25,"nodeType":"95","messageId":"96","endLine":17,"endColumn":30},{"ruleId":"93","severity":2,"message":"100","line":20,"column":23,"nodeType":"95","messageId":"96","endLine":20,"endColumn":28},"no-undef","'form' is not defined.","Identifier","undef","no-unused-vars","'types' is assigned a value but never used.","unusedVar","'style' is not defined."]